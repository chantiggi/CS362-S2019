
**********************************************
***** BEGIN TEST: Adventurer Card Effect *****
**********************************************
TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in (deck + discard) (Expected = 3 // Actual = 3):  PASSED
TEST -1 total cards from playing adventurer (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED
********************************************
***** END TEST: Adventurer Card Effect *****
********************************************

**********************************************
***** BEGIN TEST: Adventurer Card Effect *****
**********************************************

---# Players = 2---
TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 2 Players:
Test 1 (# Hand Cards):			10
Test 2 (# Deck+Discard Cards):	0
Test 3 (total # cards):			10
Test 4 (# Played Cards):		10
Test 5 (returning 0):			10

---# Players = 3---
TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 3 Players:
Test 1 (# Hand Cards):			10
Test 2 (# Deck+Discard Cards):	0
Test 3 (total # cards):			10
Test 4 (# Played Cards):		10
Test 5 (returning 0):			10

---# Players = 4---
TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2/-1 = +1 cards in hand (Expected = 6 // Actual = 7):  FAILED
TEST -2 cards in deck+discard (Expected = 3 // Actual = 3):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 10):  FAILED
TEST +1 total # played cards (Expected = 1 // Actual = 0):  FAILED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 4 Players:
Test 1 (# Hand Cards):			10
Test 2 (# Deck+Discard Cards):	0
Test 3 (total # cards):			10
Test 4 (# Played Cards):		10
Test 5 (returning 0):			10

Total # Failures:
Test 1 (# Hand Cards):			30
Test 2 (# Deck+Discard Cards):		0
Test 3 (total # cards):			30
Test 4 (# Played Cards):		30
Test 5 (returning 0):			30

********************************************
***** END TEST: Adventurer Card Effect *****
********************************************

******************************************
***** BEGIN TEST: Smithy Card Effect *****
******************************************
TEST +3/-1 = +2 cards in hand (Expected = 7 // Actual = 7):  PASSED
TEST same # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST -3 cards in deck (Expected = 2 // Actual = 2):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED
****************************************
***** END TEST: Smithy Card Effect *****
****************************************

**********************************************
***** BEGIN TEST: Great Hall Card Effect *****
**********************************************
TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST same # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST -1 cards in deck (Expected = 4 // Actual = 4):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED
********************************************
***** END TEST: Great Hall Card Effect *****
********************************************

**********************************************
***** BEGIN TEST: Great Hall Card Effect *****
**********************************************

---# Players = 2---
TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 1 // Actual = 1):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 1 // Actual = 1):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 0 // Actual = 0):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 0 // Actual = 0):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 2 Players:
Test 1 (# Actions):			10
Test 2 (# Hand Cards):		0
Test 3 (# Deck Cards):		0
Test 4 (# Discard Cards):	0
Test 5 (# Played Cards):	0
Test 6 (returning 0):		10

---# Players = 3---
TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 1 // Actual = 1):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 3 Players:
Test 1 (# Actions):			10
Test 2 (# Hand Cards):		0
Test 3 (# Deck Cards):		0
Test 4 (# Discard Cards):	0
Test 5 (# Played Cards):	0
Test 6 (returning 0):		10

---# Players = 4---
TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +1 actions (Expected = 2 // Actual = 3):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 4 Players:
Test 1 (# Actions):			10
Test 2 (# Hand Cards):		0
Test 3 (# Deck Cards):		0
Test 4 (# Discard Cards):	0
Test 5 (# Played Cards):	0
Test 6 (returning 0):		10

Total # Failures:
Test 1 (# Actions):			30
Test 2 (# Hand Cards):		0
Test 3 (# Deck Cards):		0
Test 4 (# Discard Cards):	0
Test 5 (# Played Cards):	0
Test 6 (returning 0):		30

********************************************
***** END TEST: Great Hall Card Effect *****
********************************************

*******************************************
***** BEGIN TEST: Village Card Effect *****
*******************************************
TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck (Expected = 5 // Actual = 4):  FAILED
TEST same # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST -1 total cards from playing village (Expected = 9 // Actual = 9):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED
*****************************************
***** END TEST: Village Card Effect *****
*****************************************

*******************************************
***** BEGIN TEST: Village Card Effect *****
*******************************************

---# Players = 2---
TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 7 // Actual = 7):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 7 // Actual = 7):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 1 // Actual = 1):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 6 // Actual = 6):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 1 // Actual = 1):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 6 // Actual = 6):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 0 // Actual = 0):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 5 // Actual = 5):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 0 // Actual = 0):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 5 // Actual = 5):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 2 Players:
Test 1 (# Actions):			10
Test 2 (# Hand Cards):		0
Test 3 (# Deck Cards):		0
Test 4 (# Discard Cards):	0
Test 5 (# Played Cards):	0
Test 6 (total # cards):		0
Test 7 (returning 0):		10

---# Players = 3---
TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 7 // Actual = 7):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 7 // Actual = 7):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 7 // Actual = 7):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 1 // Actual = 1):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 6 // Actual = 6):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 3 Players:
Test 1 (# Actions):			10
Test 2 (# Hand Cards):		0
Test 3 (# Deck Cards):		0
Test 4 (# Discard Cards):	0
Test 5 (# Played Cards):	0
Test 6 (total # cards):		0
Test 7 (returning 0):		10

---# Players = 4---
TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 4 // Actual = 4):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 9 // Actual = 9):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 3 // Actual = 3):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 8 // Actual = 8):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 7 // Actual = 7):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

TEST +2 actions (Expected = 3 // Actual = 1):  FAILED
TEST same # cards in hand (Expected = 5 // Actual = 5):  PASSED
TEST -1 cards in deck OR discard shuffled back into deck (Expected = 2 // Actual = 2):  PASSED
TEST correct # cards in discard (Expected = 0 // Actual = 0):  PASSED
TEST +1 total # played cards (Expected = 1 // Actual = 1):  PASSED
TEST correct total # cards (Expected = 7 // Actual = 7):  PASSED
TEST cardEffect returns 0 (Expected = 0 // Actual = -1):  FAILED

Failures for 4 Players:
Test 1 (# Actions):			10
Test 2 (# Hand Cards):		0
Test 3 (# Deck Cards):		0
Test 4 (# Discard Cards):	0
Test 5 (# Played Cards):	0
Test 6 (total # cards):		0
Test 7 (returning 0):		10

Total # Failures:
Test 1 (# Actions):			30
Test 2 (# Hand Cards):		0
Test 3 (# Deck Cards):		0
Test 4 (# Discard Cards):	0
Test 5 (# Played Cards):	0
Test 6 (total # cards):		0
Test 7 (returning 0):		30

*****************************************
***** END TEST: Village Card Effect *****
*****************************************
Function 'updateCoins'
Lines executed:81.82% of 11

Function 'gainCard'
Lines executed:0.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.68% of 219

Function 'great_hallPlayed'
Lines executed:100.00% of 5

Function 'gardensPlayed'
Lines executed:0.00% of 2

Function 'villagePlayed'
Lines executed:100.00% of 5

Function 'adventurerPlayed'
Lines executed:93.33% of 15

Function 'smithyPlayed'
Lines executed:100.00% of 5

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:95.45% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:100.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:0.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:33.93% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1095:    8:int compare(const void* a, const void* b) {
     1095:    9:   if (*(int*)a > *(int*)b)
      103:   10:      return 1;
      992:   11:   if (*(int*)a < *(int*)b)
      259:   12:      return -1;
      733:   13:   return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:   struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:   return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:   int* k = malloc(10 * sizeof(int));
    #####:   24:   k[0] = k1;
    #####:   25:   k[1] = k2;
    #####:   26:   k[2] = k3;
    #####:   27:   k[3] = k4;
    #####:   28:   k[4] = k5;
    #####:   29:   k[5] = k6;
    #####:   30:   k[6] = k7;
    #####:   31:   k[7] = k8;
    #####:   32:   k[8] = k9;
    #####:   33:   k[9] = k10;
    #####:   34:   return k;
        -:   35:}
        -:   36:
       13:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:      struct gameState *state) {
        -:   39:
        -:   40:   int i;
        -:   41:   int j;
        -:   42:   int it;			
        -:   43:   //set up random number generator
       13:   44:   SelectStream(1);
       13:   45:   PutSeed((long)randomSeed);
        -:   46:
        -:   47:   //check number of players
       13:   48:   if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:   {
    #####:   50:      return -1;
        -:   51:   }
        -:   52:
        -:   53:   //set number of players
       13:   54:   state->numPlayers = numPlayers;
        -:   55:
        -:   56:   //check selected kingdom cards are different
      143:   57:   for (i = 0; i < 10; i++)
        -:   58:   {
     1430:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
     1300:   61:         if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:         {
    #####:   63:            return -1;
        -:   64:         }
        -:   65:      }
        -:   66:   }
        -:   67:
        -:   68:
        -:   69:   //initialize supply
        -:   70:   ///////////////////////////////
        -:   71:
        -:   72:   //set number of Curse cards
       13:   73:   if (numPlayers == 2)
        -:   74:   {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:   }
        6:   77:   else if (numPlayers == 3)
        -:   78:   {
        3:   79:      state->supplyCount[curse] = 20;
        -:   80:   }
        -:   81:   else
        -:   82:   {
        3:   83:      state->supplyCount[curse] = 30;
        -:   84:   }
        -:   85:
        -:   86:   //set number of Victory cards
       13:   87:   if (numPlayers == 2)
        -:   88:   {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:   }
        -:   93:   else
        -:   94:   {
        6:   95:      state->supplyCount[estate] = 12;
        6:   96:      state->supplyCount[duchy] = 12;
        6:   97:      state->supplyCount[province] = 12;
        -:   98:   }
        -:   99:
        -:  100:   //set number of Treasure cards
       13:  101:   state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  102:   state->supplyCount[silver] = 40;
       13:  103:   state->supplyCount[gold] = 30;
        -:  104:
        -:  105:   //set number of Kingdom cards
      273:  106:   for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:   {
     2145:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:      {
     2015:  110:         if (kingdomCards[j] == i)
        -:  111:         {
        -:  112:            //check if card is a 'Victory' Kingdom card
      130:  113:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:            {
       20:  115:               if (numPlayers == 2){ 
        4:  116:                  state->supplyCount[i] = 8; 
        -:  117:               }
        6:  118:               else{ state->supplyCount[i] = 12; }
        -:  119:            }
        -:  120:            else
        -:  121:            {
      120:  122:               state->supplyCount[i] = 10;
        -:  123:            }
      130:  124:            break;
        -:  125:         }
        -:  126:         else    //card is not in the set choosen for the game
        -:  127:         {
     1885:  128:            state->supplyCount[i] = -1;
        -:  129:         }
        -:  130:      }
        -:  131:
        -:  132:   }
        -:  133:
        -:  134:   ////////////////////////
        -:  135:   //supply intilization complete
        -:  136:
        -:  137:   //set player decks
       48:  138:   for (i = 0; i < numPlayers; i++)
        -:  139:   {
       35:  140:      state->deckCount[i] = 0;
      140:  141:      for (j = 0; j < 3; j++)
        -:  142:      {
      105:  143:         state->deck[i][j] = estate;
      105:  144:         state->deckCount[i]++;
        -:  145:      }
      280:  146:      for (j = 3; j < 10; j++)
        -:  147:      {
      245:  148:         state->deck[i][j] = copper;
      245:  149:         state->deckCount[i]++;		
        -:  150:      }
        -:  151:   }
        -:  152:
        -:  153:   //shuffle player decks
       48:  154:   for (i = 0; i < numPlayers; i++)
        -:  155:   {
       35:  156:      if ( shuffle(i, state) < 0 )
        -:  157:      {
    #####:  158:         return -1;
        -:  159:      }
        -:  160:   }
        -:  161:
        -:  162:   //draw player hands
       48:  163:   for (i = 0; i < numPlayers; i++)
        -:  164:   {  
        -:  165:      //initialize hand size to zero
       35:  166:      state->handCount[i] = 0;
       35:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:   }
        -:  174:
        -:  175:   //set embargo tokens to 0 for all supply piles
      364:  176:   for (i = 0; i <= treasure_map; i++)
        -:  177:   {
      351:  178:      state->embargoTokens[i] = 0;
        -:  179:   }
        -:  180:
        -:  181:   //initialize first player's turn
       13:  182:   state->outpostPlayed = 0;
       13:  183:   state->phase = 0;
       13:  184:   state->numActions = 1;
       13:  185:   state->numBuys = 1;
       13:  186:   state->playedCardCount = 0;
       13:  187:   state->whoseTurn = 0;
       13:  188:   state->handCount[state->whoseTurn] = 0;
        -:  189:   //int it; move to top
        -:  190:
        -:  191:   //Moved draw cards to here, only drawing at the start of a turn
       78:  192:   for (it = 0; it < 5; it++){
       65:  193:      drawCard(state->whoseTurn, state);
        -:  194:   }
        -:  195:
       13:  196:   updateCoins(state->whoseTurn, state, 0);
        -:  197:
       13:  198:   return 0;
        -:  199:}
        -:  200:
      107:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:   int newDeck[MAX_DECK];
      107:  205:   int newDeckPos = 0;
        -:  206:   int card;
        -:  207:   int i;
        -:  208:
      107:  209:   if (state->deckCount[player] < 1)
    #####:  210:      return -1;
      107:  211:   qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:   /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      990:  214:   while (state->deckCount[player] > 0) {
      776:  215:      card = floor(Random() * state->deckCount[player]);
      776:  216:      newDeck[newDeckPos] = state->deck[player][card];
      776:  217:      newDeckPos++;
     1979:  218:      for (i = card; i < state->deckCount[player]-1; i++) {
     1203:  219:         state->deck[player][i] = state->deck[player][i+1];
        -:  220:      }
      776:  221:      state->deckCount[player]--;
        -:  222:   }
      883:  223:   for (i = 0; i < newDeckPos; i++) {
      776:  224:      state->deck[player][i] = newDeck[i];
      776:  225:      state->deckCount[player]++;
        -:  226:   }
        -:  227:
      107:  228:   return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:   int card;
    #####:  234:   int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:   //check if it is the right phase
    #####:  237:   if (state->phase != 0)
        -:  238:   {
    #####:  239:      return -1;
        -:  240:   }
        -:  241:
        -:  242:   //check if player has enough actions
    #####:  243:   if ( state->numActions < 1 )
        -:  244:   {
    #####:  245:      return -1;
        -:  246:   }
        -:  247:
        -:  248:   //get card played
    #####:  249:   card = handCard(handPos, state);
        -:  250:
        -:  251:   //check if selected card is an action
    #####:  252:   if ( card < adventurer || card > treasure_map )
        -:  253:   {
    #####:  254:      return -1;
        -:  255:   }
        -:  256:
        -:  257:   //play card
    #####:  258:   if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:   {
    #####:  260:      return -1;
        -:  261:   }
        -:  262:
        -:  263:   //reduce number of actions
    #####:  264:   state->numActions--;
        -:  265:
        -:  266:   //update coins (Treasure cards may be added with card draws)
    #####:  267:   updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:   return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:   int who;
        -:  274:   if (DEBUG){
        -:  275:      printf("Entering buyCard...\n");
        -:  276:   }
        -:  277:
        -:  278:   // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:   who = state->whoseTurn;
        -:  281:
    #####:  282:   if (state->numBuys < 1){
        -:  283:      if (DEBUG)
        -:  284:         printf("You do not have any buys left\n");
    #####:  285:      return -1;
    #####:  286:   } else if (supplyCount(supplyPos, state) <1){
        -:  287:      if (DEBUG)
        -:  288:         printf("There are not any of that type of card left\n");
    #####:  289:      return -1;
    #####:  290:   } else if (state->coins < getCost(supplyPos)){
        -:  291:      if (DEBUG) 
        -:  292:         printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:      return -1;
        -:  294:   } else {
    #####:  295:      state->phase=1;
        -:  296:      //state->supplyCount[supplyPos]--;
    #####:  297:      gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:      state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:      state->numBuys--;
        -:  301:      if (DEBUG)
        -:  302:         printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:   }
        -:  304:
        -:  305:   //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:   //state->discardCount[who]++;
        -:  307:
    #####:  308:   return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:   return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:   int currentPlayer = whoseTurn(state);
    #####:  317:   return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:   return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:   int i;
    #####:  326:   int count = 0;
        -:  327:
    #####:  328:   for (i = 0; i < state->deckCount[player]; i++)
        -:  329:   {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:   }
        -:  332:
    #####:  333:   for (i = 0; i < state->handCount[player]; i++)
        -:  334:   {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:   }
        -:  337:
    #####:  338:   for (i = 0; i < state->discardCount[player]; i++)
        -:  339:   {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:   }
        -:  342:
    #####:  343:   return count;
        -:  344:}
        -:  345:
      274:  346:int whoseTurn(struct gameState *state) {
      274:  347:   return state->whoseTurn;
        -:  348:}
        -:  349:
       90:  350:int endTurn(struct gameState *state) {
        -:  351:   int k;
        -:  352:   int i;
       90:  353:   int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:   //Discard hand
      600:  356:   for (i = 0; i < state->handCount[currentPlayer]; i++){
      510:  357:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      510:  358:      state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:   }
       90:  360:   state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:   //Code for determining the player
       90:  363:   if (currentPlayer < (state->numPlayers - 1)){ 
       60:  364:      state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:   }
        -:  366:   else{
       30:  367:      state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:   }
        -:  369:
       90:  370:   state->outpostPlayed = 0;
       90:  371:   state->phase = 0;
       90:  372:   state->numActions = 1;
       90:  373:   state->coins = 0;
       90:  374:   state->numBuys = 1;
       90:  375:   state->playedCardCount = 0;
       90:  376:   state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:   //int k; move to top
        -:  379:   //Next player draws hand
      540:  380:   for (k = 0; k < 5; k++){
      450:  381:      drawCard(state->whoseTurn, state);//Draw a card
        -:  382:   }
        -:  383:
        -:  384:   //Update money
       90:  385:   updateCoins(state->whoseTurn, state , 0);
        -:  386:
       90:  387:   return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:   int i;
        -:  392:   int j;
        -:  393:
        -:  394:   //if stack of Province cards is empty, the game ends
    #####:  395:   if (state->supplyCount[province] == 0)
        -:  396:   {
    #####:  397:      return 1;
        -:  398:   }
        -:  399:
        -:  400:   //if three supply pile are at 0, the game ends
    #####:  401:   j = 0;
    #####:  402:   for (i = 0; i < 25; i++)
        -:  403:   {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:      {
    #####:  406:         j++;
        -:  407:      }
        -:  408:   }
    #####:  409:   if ( j >= 3)
        -:  410:   {
    #####:  411:      return 1;
        -:  412:   }
        -:  413:
    #####:  414:   return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:   int i;
    #####:  420:   int score = 0;
        -:  421:   //score from hand
    #####:  422:   for (i = 0; i < state->handCount[player]; i++)
        -:  423:   {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:   }
        -:  431:
        -:  432:   //score from discard
    #####:  433:   for (i = 0; i < state->discardCount[player]; i++)
        -:  434:   {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:   }
        -:  442:
        -:  443:   //score from deck
    #####:  444:   for (i = 0; i < state->discardCount[player]; i++)
        -:  445:   {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:   }
        -:  453:
    #####:  454:   return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:   int i;	
        -:  459:   int j;
        -:  460:   int highScore;
        -:  461:   int currentPlayer;
        -:  462:
        -:  463:   //get score for each player
    #####:  464:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:   {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:      {
    #####:  469:         players[i] = -9999;
        -:  470:      }
        -:  471:      else
        -:  472:      {
    #####:  473:         players[i] = scoreFor (i, state);
        -:  474:      }
        -:  475:   }
        -:  476:
        -:  477:   //find highest score
    #####:  478:   j = 0;
    #####:  479:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:   {
    #####:  481:      if (players[i] > players[j])
        -:  482:      {
    #####:  483:         j = i;
        -:  484:      }
        -:  485:   }
    #####:  486:   highScore = players[j];
        -:  487:
        -:  488:   //add 1 to players who had less turns
    #####:  489:   currentPlayer = whoseTurn(state);
    #####:  490:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:   {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:      {
    #####:  494:         players[i]++;
        -:  495:      }
        -:  496:   }
        -:  497:
        -:  498:   //find new highest score
    #####:  499:   j = 0;
    #####:  500:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:   {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:      {
    #####:  504:         j = i;
        -:  505:      }
        -:  506:   }
    #####:  507:   highScore = players[j];
        -:  508:
        -:  509:   //set winners in array to 1 and rest to 0
    #####:  510:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:   {
    #####:  512:      if ( players[i] == highScore )
        -:  513:      {
    #####:  514:         players[i] = 1;
        -:  515:      }
        -:  516:      else
        -:  517:      {
    #####:  518:         players[i] = 0;
        -:  519:      }
        -:  520:   }
        -:  521:
    #####:  522:   return 0;
        -:  523:}
        -:  524:
      663:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:   int deckCounter;
      663:  528:   if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:      //Step 1 Shuffle the discard pile back into a deck
        -:  531:      int i;
        -:  532:      //Move discard to deck
      498:  533:      for (i = 0; i < state->discardCount[player];i++){
      426:  534:         state->deck[player][i] = state->discard[player][i];
      426:  535:         state->discard[player][i] = -1;
        -:  536:      }
        -:  537:
       72:  538:      state->deckCount[player] = state->discardCount[player];
       72:  539:      state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:      //Shufffle the deck
       72:  542:      shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:      if (DEBUG){//Debug statements
        -:  545:         printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:      }
        -:  547:
       72:  548:      state->discardCount[player] = 0;
        -:  549:
        -:  550:      //Step 2 Draw Card
       72:  551:      count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:      if (DEBUG){//Debug statements
        -:  554:         printf("Current hand count: %d\n", count);
        -:  555:      }
        -:  556:
       72:  557:      deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       72:  559:      if (deckCounter == 0)
    #####:  560:         return -1;
        -:  561:
       72:  562:      state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       72:  563:      state->deckCount[player]--;
       72:  564:      state->handCount[player]++;//Increment hand count
        -:  565:   }
        -:  566:
        -:  567:   else{
      591:  568:      int count = state->handCount[player];//Get current hand count for player
        -:  569:      int deckCounter;
        -:  570:      if (DEBUG){//Debug statements
        -:  571:         printf("Current hand count: %d\n", count);
        -:  572:      }
        -:  573:
      591:  574:      deckCounter = state->deckCount[player];//Create holder for the deck count
      591:  575:      state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      591:  576:      state->deckCount[player]--;
      591:  577:      state->handCount[player]++;//Increment hand count
        -:  578:   }
        -:  579:
      663:  580:   return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:   switch( cardNumber ) 
        -:  586:   {
        -:  587:      case curse:
    #####:  588:         return 0;
        -:  589:      case estate:
    #####:  590:         return 2;
        -:  591:      case duchy:
    #####:  592:         return 5;
        -:  593:      case province:
    #####:  594:         return 8;
        -:  595:      case copper:
    #####:  596:         return 0;
        -:  597:      case silver:
    #####:  598:         return 3;
        -:  599:      case gold:
    #####:  600:         return 6;
        -:  601:      case adventurer:
    #####:  602:         return 6;
        -:  603:      case council_room:
    #####:  604:         return 5;
        -:  605:      case feast:
    #####:  606:         return 4;
        -:  607:      case gardens:
    #####:  608:         return 4;
        -:  609:      case mine:
    #####:  610:         return 5;
        -:  611:      case remodel:
    #####:  612:         return 4;
        -:  613:      case smithy:
    #####:  614:         return 4;
        -:  615:      case village:
    #####:  616:         return 3;
        -:  617:      case baron:
    #####:  618:         return 4;
        -:  619:      case great_hall:
    #####:  620:         return 3;
        -:  621:      case minion:
    #####:  622:         return 5;
        -:  623:      case steward:
    #####:  624:         return 3;
        -:  625:      case tribute:
    #####:  626:         return 5;
        -:  627:      case ambassador:
    #####:  628:         return 3;
        -:  629:      case cutpurse:
    #####:  630:         return 4;
        -:  631:      case embargo: 
    #####:  632:         return 2;
        -:  633:      case outpost:
    #####:  634:         return 5;
        -:  635:      case salvager:
    #####:  636:         return 4;
        -:  637:      case sea_hag:
    #####:  638:         return 4;
        -:  639:      case treasure_map:
    #####:  640:         return 4;
        -:  641:   }
        -:  642:
    #####:  643:   return -1;
        -:  644:}
        -:  645:
        -:  646://refactored card functions below
        1:  647:int smithyPlayed(struct gameState *state, int handPos, int currentPlayer){
        -:  648:   //+3 Cards
        -:  649:   int i;
        4:  650:   for (i = 0; i < 3; i++)
        -:  651:   {
        3:  652:      drawCard(currentPlayer, state);
        -:  653:   } 
        -:  654:   //discard card from hand
        1:  655:   discardCard(currentPlayer, handPos, state, 0);
        1:  656:   return 0;   
        -:  657:};
        -:  658:
       31:  659:int adventurerPlayed(int drawntreasure, struct gameState *state, int currentPlayer, int *temphand, int z){
      145:  660:   while(drawntreasure < 2){
       83:  661:      if (state->deckCount[currentPlayer] == 1){
    #####:  662:         shuffle(currentPlayer, state);
        -:  663:      };
       83:  664:      drawCard(currentPlayer, state);
       83:  665:      int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
       83:  666:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       62:  667:         drawntreasure++;
        -:  668:      else{
       21:  669:         temphand[z]=cardDrawn;
       21:  670:         state->handCount[currentPlayer]--;
       21:  671:         z++;
        -:  672:      };
        -:  673:   };
       83:  674:   while(z-1>=0){
       21:  675:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       21:  676:      z=z-1;
        -:  677:   };
       31:  678:   return 0;
        -:  679:};
        -:  680:
       31:  681:int villagePlayed(int currentPlayer, struct gameState* state, int handPos){
        -:  682:   //+1 Card
       31:  683:   drawCard(currentPlayer, state);
        -:  684:   //+2 Actions
       31:  685:   state->numActions = state->numActions++;
        -:  686:   //discard played card from hand
       31:  687:   discardCard(handPos, currentPlayer, state, 0);
       31:  688:   return 0;
        -:  689:};
        -:  690:
    #####:  691:int gardensPlayed(){
    #####:  692:   return -1;
        -:  693:};
        -:  694:
       31:  695:int great_hallPlayed(int currentPlayer, struct gameState* state, int handPos){
        -:  696:   //+1 Card
       31:  697:   drawCard(currentPlayer, state);
        -:  698:   //+1 Actions
       31:  699:   state->numActions = state->numActions + 2;
        -:  700:   //discard card from hand
       31:  701:   discardCard(handPos, currentPlayer, state, 0);
       31:  702:   return 0;
        -:  703:};
        -:  704:
       94:  705:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  706:{
        -:  707:   int i;
        -:  708:   int j;
        -:  709:   int k;
        -:  710:   int x;
        -:  711:   int index;
       94:  712:   int currentPlayer = whoseTurn(state);
       94:  713:   int nextPlayer = currentPlayer + 1;
        -:  714:
       94:  715:   int tributeRevealedCards[2] = {-1, -1};
        -:  716:   int temphand[MAX_HAND];// moved above the if statement
       94:  717:   int drawntreasure=0;
        -:  718:   //int cardDrawn;
       94:  719:   int z = 0;// this is the counter for the temp hand
       94:  720:   if (nextPlayer > (state->numPlayers - 1)){
       30:  721:      nextPlayer = 0;
        -:  722:   }
        -:  723:
        -:  724:   //refactored card functions called 
       94:  725:   if(card == smithy){
        1:  726:      smithyPlayed(state, handPos, currentPlayer);
        -:  727:   };
       94:  728:   if(card == adventurer){
       31:  729:      adventurerPlayed(drawntreasure, state, currentPlayer, temphand, z);
        -:  730:   };	
       94:  731:   if(card == village){
       31:  732:      villagePlayed(currentPlayer, state, handPos);
        -:  733:   };
       94:  734:   if(card == gardens){
    #####:  735:      gardensPlayed();
        -:  736:   };
       94:  737:   if(card == great_hall){
       31:  738:      great_hallPlayed(currentPlayer, state, handPos);
        -:  739:   };
        -:  740:   //uses switch to select card and perform actions
       94:  741:   switch( card ) 
        -:  742:   {
        -:  743:      /*      case adventurer:
        -:  744:              while(drawntreasure<2){
        -:  745:              if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  746:              shuffle(currentPlayer, state);
        -:  747:              }
        -:  748:              drawCard(currentPlayer, state);
        -:  749:              cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  750:              if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  751:              drawntreasure++;
        -:  752:              else{
        -:  753:              temphand[z]=cardDrawn;
        -:  754:              state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  755:              z++;
        -:  756:              }
        -:  757:              }
        -:  758:              while(z-1>=0){
        -:  759:              state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  760:              z=z-1;
        -:  761:              }
        -:  762:              return 0;
        -:  763:              */
        -:  764:      case council_room:
        -:  765:         //+4 Cards
    #####:  766:         for (i = 0; i < 4; i++)
        -:  767:         {
    #####:  768:            drawCard(currentPlayer, state);
        -:  769:         }
        -:  770:
        -:  771:         //+1 Buy
    #####:  772:         state->numBuys++;
        -:  773:
        -:  774:         //Each other player draws a card
    #####:  775:         for (i = 0; i < state->numPlayers; i++)
        -:  776:         {
    #####:  777:            if ( i != currentPlayer )
        -:  778:            {
    #####:  779:               drawCard(i, state);
        -:  780:            }
        -:  781:         }
        -:  782:
        -:  783:         //put played card in played card pile
    #####:  784:         discardCard(handPos, currentPlayer, state, 0);
        -:  785:
    #####:  786:         return 0;
        -:  787:
        -:  788:      case feast:
        -:  789:         //gain card with cost up to 5
        -:  790:         //Backup hand
    #####:  791:         for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  792:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  793:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  794:         }
        -:  795:         //Backup hand
        -:  796:
        -:  797:         //Update Coins for Buy
    #####:  798:         updateCoins(currentPlayer, state, 5);
    #####:  799:         x = 1;//Condition to loop on
    #####:  800:         while( x == 1) {//Buy one card
    #####:  801:            if (supplyCount(choice1, state) <= 0){
        -:  802:               if (DEBUG)
        -:  803:                  printf("None of that card left, sorry!\n");
        -:  804:
        -:  805:               if (DEBUG){
        -:  806:                  printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  807:               }
        -:  808:            }
    #####:  809:            else if (state->coins < getCost(choice1)){
    #####:  810:               printf("That card is too expensive!\n");
        -:  811:
        -:  812:               if (DEBUG){
        -:  813:                  printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  814:               }
        -:  815:            }
        -:  816:            else{
        -:  817:
        -:  818:               if (DEBUG){
        -:  819:                  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  820:               }
        -:  821:
    #####:  822:               gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  823:               x = 0;//No more buying cards
        -:  824:
        -:  825:               if (DEBUG){
        -:  826:                  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  827:               }
        -:  828:
        -:  829:            }
        -:  830:         }     
        -:  831:
        -:  832:         //Reset Hand
    #####:  833:         for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  834:            state->hand[currentPlayer][i] = temphand[i];
    #####:  835:            temphand[i] = -1;
        -:  836:         }
        -:  837:         //Reset Hand
        -:  838:
    #####:  839:         return 0;
        -:  840:
        -:  841:         /*      case gardens:
        -:  842:                 return -1;
        -:  843:                 */
        -:  844:      case mine:
    #####:  845:         j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  846:
    #####:  847:         if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  848:         {
    #####:  849:            return -1;
        -:  850:         }
        -:  851:
    #####:  852:         if (choice2 > treasure_map || choice2 < curse)
        -:  853:         {
    #####:  854:            return -1;
        -:  855:         }
        -:  856:
    #####:  857:         if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  858:         {
    #####:  859:            return -1;
        -:  860:         }
        -:  861:
    #####:  862:         gainCard(choice2, state, 2, currentPlayer);
        -:  863:
        -:  864:         //discard card from hand
    #####:  865:         discardCard(handPos, currentPlayer, state, 0);
        -:  866:
        -:  867:         //discard trashed card
    #####:  868:         for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  869:         {
    #####:  870:            if (state->hand[currentPlayer][i] == j)
        -:  871:            {
    #####:  872:               discardCard(i, currentPlayer, state, 0);			
    #####:  873:               break;
        -:  874:            }
        -:  875:         }
        -:  876:
    #####:  877:         return 0;
        -:  878:
        -:  879:      case remodel:
    #####:  880:         j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  881:
    #####:  882:         if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  883:         {
    #####:  884:            return -1;
        -:  885:         }
        -:  886:
    #####:  887:         gainCard(choice2, state, 0, currentPlayer);
        -:  888:
        -:  889:         //discard card from hand
    #####:  890:         discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:         //discard trashed card
    #####:  893:         for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:         {
    #####:  895:            if (state->hand[currentPlayer][i] == j)
        -:  896:            {
    #####:  897:               discardCard(i, currentPlayer, state, 0);			
    #####:  898:               break;
        -:  899:            }
        -:  900:         }
        -:  901:
        -:  902:
    #####:  903:         return 0;
        -:  904:         /*	
        -:  905:            case smithy:
        -:  906:         //+3 Cards
        -:  907:         for (i = 0; i < 3; i++)
        -:  908:         {
        -:  909:         drawCard(currentPlayer, state);
        -:  910:         }
        -:  911:
        -:  912:         //discard card from hand
        -:  913:         discardCard(handPos, currentPlayer, state, 0);
        -:  914:         return 0;
        -:  915:         */	
        -:  916:         /*      case village:
        -:  917:         //+1 Card
        -:  918:         drawCard(currentPlayer, state);
        -:  919:
        -:  920:         //+2 Actions
        -:  921:         state->numActions = state->numActions + 2;
        -:  922:
        -:  923:         //discard played card from hand
        -:  924:         discardCard(handPos, currentPlayer, state, 0);
        -:  925:         return 0;
        -:  926:         */
        -:  927:      case baron:
    #####:  928:         state->numBuys++;//Increase buys by 1!
    #####:  929:         if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:            int p = 0;//Iterator for hand!
    #####:  931:            int card_not_discarded = 1;//Flag for discard set!
    #####:  932:            while(card_not_discarded){
    #####:  933:               if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:                  state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:                  state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:                  state->discardCount[currentPlayer]++;
    #####:  937:                  for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:                     state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:                  }
    #####:  940:                  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:                  state->handCount[currentPlayer]--;
    #####:  942:                  card_not_discarded = 0;//Exit the loop
        -:  943:               }
    #####:  944:               else if (p > state->handCount[currentPlayer]){
        -:  945:                  if(DEBUG) {
        -:  946:                     printf("No estate cards in your hand, invalid choice\n");
        -:  947:                     printf("Must gain an estate if there are any\n");
        -:  948:                  }
    #####:  949:                  if (supplyCount(estate, state) > 0){
    #####:  950:                     gainCard(estate, state, 0, currentPlayer);
    #####:  951:                     state->supplyCount[estate]--;//Decrement estates
    #####:  952:                     if (supplyCount(estate, state) == 0){
    #####:  953:                        isGameOver(state);
        -:  954:                     }
        -:  955:                  }
    #####:  956:                  card_not_discarded = 0;//Exit the loop
        -:  957:               }
        -:  958:
        -:  959:               else{
    #####:  960:                  p++;//Next card
        -:  961:               }
        -:  962:            }
        -:  963:         }
        -:  964:
        -:  965:         else{
    #####:  966:            if (supplyCount(estate, state) > 0){
    #####:  967:               gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:               state->supplyCount[estate]--;//Decrement Estates
    #####:  969:               if (supplyCount(estate, state) == 0){
    #####:  970:                  isGameOver(state);
        -:  971:               }
        -:  972:            }
        -:  973:         }
        -:  974:
        -:  975:
    #####:  976:         return 0;
        -:  977:
        -:  978:         /*      case great_hall:
        -:  979:         //+1 Card
        -:  980:         drawCard(currentPlayer, state);
        -:  981:
        -:  982:         //+1 Actions
        -:  983:         state->numActions++;
        -:  984:
        -:  985:         //discard card from hand
        -:  986:         discardCard(handPos, currentPlayer, state, 0);
        -:  987:         return 0;
        -:  988:         */
        -:  989:      case minion:
        -:  990:         //+1 action
    #####:  991:         state->numActions++;
        -:  992:
        -:  993:         //discard card from hand
    #####:  994:         discardCard(handPos, currentPlayer, state, 0);
        -:  995:
    #####:  996:         if (choice1)		//+2 coins
        -:  997:         {
    #####:  998:            state->coins = state->coins + 2;
        -:  999:         }
        -: 1000:
    #####: 1001:         else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1002:         {
        -: 1003:            //discard hand
    #####: 1004:            while(numHandCards(state) > 0)
        -: 1005:            {
    #####: 1006:               discardCard(handPos, currentPlayer, state, 0);
        -: 1007:            }
        -: 1008:
        -: 1009:            //draw 4
    #####: 1010:            for (i = 0; i < 4; i++)
        -: 1011:            {
    #####: 1012:               drawCard(currentPlayer, state);
        -: 1013:            }
        -: 1014:
        -: 1015:            //other players discard hand and redraw if hand size > 4
    #####: 1016:            for (i = 0; i < state->numPlayers; i++)
        -: 1017:            {
    #####: 1018:               if (i != currentPlayer)
        -: 1019:               {
    #####: 1020:                  if ( state->handCount[i] > 4 )
        -: 1021:                  {
        -: 1022:                     //discard hand
    #####: 1023:                     while( state->handCount[i] > 0 )
        -: 1024:                     {
    #####: 1025:                        discardCard(handPos, i, state, 0);
        -: 1026:                     }
        -: 1027:
        -: 1028:                     //draw 4
    #####: 1029:                     for (j = 0; j < 4; j++)
        -: 1030:                     {
    #####: 1031:                        drawCard(i, state);
        -: 1032:                     }
        -: 1033:                  }
        -: 1034:               }
        -: 1035:            }
        -: 1036:
        -: 1037:         }
    #####: 1038:         return 0;
        -: 1039:
        -: 1040:      case steward:
    #####: 1041:         if (choice1 == 1)
        -: 1042:         {
        -: 1043:            //+2 cards
    #####: 1044:            drawCard(currentPlayer, state);
    #####: 1045:            drawCard(currentPlayer, state);
        -: 1046:         }
    #####: 1047:         else if (choice1 == 2)
        -: 1048:         {
        -: 1049:            //+2 coins
    #####: 1050:            state->coins = state->coins + 2;
        -: 1051:         }
        -: 1052:         else
        -: 1053:         {
        -: 1054:            //trash 2 cards in hand
    #####: 1055:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1056:            discardCard(choice3, currentPlayer, state, 1);
        -: 1057:         }
        -: 1058:
        -: 1059:         //discard card from hand
    #####: 1060:         discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:         return 0;
        -: 1062:
        -: 1063:      case tribute:
    #####: 1064:         if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1065:            if (state->deckCount[nextPlayer] > 0){
    #####: 1066:               tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1067:               state->deckCount[nextPlayer]--;
        -: 1068:            }
    #####: 1069:            else if (state->discardCount[nextPlayer] > 0){
    #####: 1070:               tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1071:               state->discardCount[nextPlayer]--;
        -: 1072:            }
        -: 1073:            else{
        -: 1074:               //No Card to Reveal
        -: 1075:               if (DEBUG){
        -: 1076:                  printf("No cards to reveal\n");
        -: 1077:               }
        -: 1078:            }
        -: 1079:         }
        -: 1080:
        -: 1081:         else{
    #####: 1082:            if (state->deckCount[nextPlayer] == 0){
    #####: 1083:               for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1084:                  state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1085:                  state->deckCount[nextPlayer]++;
    #####: 1086:                  state->discard[nextPlayer][i] = -1;
    #####: 1087:                  state->discardCount[nextPlayer]--;
        -: 1088:               }
        -: 1089:
    #####: 1090:               shuffle(nextPlayer,state);//Shuffle the deck
        -: 1091:            } 
    #####: 1092:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:            state->deckCount[nextPlayer]--;
    #####: 1095:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1096:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1097:            state->deckCount[nextPlayer]--;
        -: 1098:         }    
        -: 1099:
    #####: 1100:         if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1101:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1102:            state->playedCardCount++;
    #####: 1103:            tributeRevealedCards[1] = -1;
        -: 1104:         }
        -: 1105:
    #####: 1106:         for (i = 0; i <= 2; i ++){
    #####: 1107:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1108:               state->coins += 2;
        -: 1109:            }
        -: 1110:
    #####: 1111:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1112:               drawCard(currentPlayer, state);
    #####: 1113:               drawCard(currentPlayer, state);
        -: 1114:            }
        -: 1115:            else{//Action Card
    #####: 1116:               state->numActions = state->numActions + 2;
        -: 1117:            }
        -: 1118:         }
        -: 1119:
    #####: 1120:         return 0;
        -: 1121:
        -: 1122:      case ambassador:
    #####: 1123:         j = 0;		//used to check if player has enough cards to discard
        -: 1124:
    #####: 1125:         if (choice2 > 2 || choice2 < 0)
        -: 1126:         {
    #####: 1127:            return -1;				
        -: 1128:         }
        -: 1129:
    #####: 1130:         if (choice1 == handPos)
        -: 1131:         {
    #####: 1132:            return -1;
        -: 1133:         }
        -: 1134:
    #####: 1135:         for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:         {
    #####: 1137:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1138:            {
    #####: 1139:               j++;
        -: 1140:            }
        -: 1141:         }
    #####: 1142:         if (j < choice2)
        -: 1143:         {
    #####: 1144:            return -1;				
        -: 1145:         }
        -: 1146:
        -: 1147:         if (DEBUG) 
        -: 1148:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1149:
        -: 1150:         //increase supply count for choosen card by amount being discarded
    #####: 1151:         state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1152:
        -: 1153:         //each other player gains a copy of revealed card
    #####: 1154:         for (i = 0; i < state->numPlayers; i++)
        -: 1155:         {
    #####: 1156:            if (i != currentPlayer)
        -: 1157:            {
    #####: 1158:               gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1159:            }
        -: 1160:         }
        -: 1161:
        -: 1162:         //discard played card from hand
    #####: 1163:         discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
        -: 1165:         //trash copies of cards returned to supply
    #####: 1166:         for (j = 0; j < choice2; j++)
        -: 1167:         {
    #####: 1168:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1169:            {
    #####: 1170:               if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1171:               {
    #####: 1172:                  discardCard(i, currentPlayer, state, 1);
    #####: 1173:                  break;
        -: 1174:               }
        -: 1175:            }
        -: 1176:         }			
        -: 1177:
    #####: 1178:         return 0;
        -: 1179:
        -: 1180:      case cutpurse:
        -: 1181:
    #####: 1182:         updateCoins(currentPlayer, state, 2);
    #####: 1183:         for (i = 0; i < state->numPlayers; i++)
        -: 1184:         {
    #####: 1185:            if (i != currentPlayer)
        -: 1186:            {
    #####: 1187:               for (j = 0; j < state->handCount[i]; j++)
        -: 1188:               {
    #####: 1189:                  if (state->hand[i][j] == copper)
        -: 1190:                  {
    #####: 1191:                     discardCard(j, i, state, 0);
    #####: 1192:                     break;
        -: 1193:                  }
    #####: 1194:                  if (j == state->handCount[i])
        -: 1195:                  {
    #####: 1196:                     for (k = 0; k < state->handCount[i]; k++)
        -: 1197:                     {
        -: 1198:                        if (DEBUG)
        -: 1199:                           printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1200:                     }	
    #####: 1201:                     break;
        -: 1202:                  }		
        -: 1203:               }
        -: 1204:
        -: 1205:            }
        -: 1206:
        -: 1207:         }				
        -: 1208:
        -: 1209:         //discard played card from hand
    #####: 1210:         discardCard(handPos, currentPlayer, state, 0);			
        -: 1211:
    #####: 1212:         return 0;
        -: 1213:
        -: 1214:
        -: 1215:      case embargo: 
        -: 1216:         //+2 Coins
    #####: 1217:         state->coins = state->coins + 2;
        -: 1218:
        -: 1219:         //see if selected pile is in play
    #####: 1220:         if ( state->supplyCount[choice1] == -1 )
        -: 1221:         {
    #####: 1222:            return -1;
        -: 1223:         }
        -: 1224:
        -: 1225:         //add embargo token to selected supply pile
    #####: 1226:         state->embargoTokens[choice1]++;
        -: 1227:
        -: 1228:         //trash card
    #####: 1229:         discardCard(handPos, currentPlayer, state, 1);		
    #####: 1230:         return 0;
        -: 1231:
        -: 1232:      case outpost:
        -: 1233:         //set outpost flag
    #####: 1234:         state->outpostPlayed++;
        -: 1235:
        -: 1236:         //discard card
    #####: 1237:         discardCard(handPos, currentPlayer, state, 0);
    #####: 1238:         return 0;
        -: 1239:
        -: 1240:      case salvager:
        -: 1241:         //+1 buy
    #####: 1242:         state->numBuys++;
        -: 1243:
    #####: 1244:         if (choice1)
        -: 1245:         {
        -: 1246:            //gain coins equal to trashed card
    #####: 1247:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1248:            //trash card
    #####: 1249:            discardCard(choice1, currentPlayer, state, 1);	
        -: 1250:         }
        -: 1251:
        -: 1252:         //discard card
    #####: 1253:         discardCard(handPos, currentPlayer, state, 0);
    #####: 1254:         return 0;
        -: 1255:
        -: 1256:      case sea_hag:
    #####: 1257:         for (i = 0; i < state->numPlayers; i++){
    #####: 1258:            if (i != currentPlayer){
    #####: 1259:               state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1260:               state->discardCount[i]++;
    #####: 1261:               state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1262:            }
        -: 1263:         }
    #####: 1264:         return 0;
        -: 1265:
        -: 1266:      case treasure_map:
        -: 1267:         //search hand for another treasure_map
    #####: 1268:         index = -1;
    #####: 1269:         for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:         {
    #####: 1271:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1272:            {
    #####: 1273:               index = i;
    #####: 1274:               break;
        -: 1275:            }
        -: 1276:         }
    #####: 1277:         if (index > -1)
        -: 1278:         {
        -: 1279:            //trash both treasure cards
    #####: 1280:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1281:            discardCard(index, currentPlayer, state, 1);
        -: 1282:
        -: 1283:            //gain 4 Gold cards
    #####: 1284:            for (i = 0; i < 4; i++)
        -: 1285:            {
    #####: 1286:               gainCard(gold, state, 1, currentPlayer);
        -: 1287:            }
        -: 1288:
        -: 1289:            //return success
    #####: 1290:            return 1;
        -: 1291:         }
        -: 1292:
        -: 1293:         //no second treasure_map found in hand
    #####: 1294:         return -1;
        -: 1295:   }
        -: 1296:
       94: 1297:   return -1;
        -: 1298:}
        -: 1299:
       63: 1300:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1301:{
        -: 1302:
        -: 1303:   //if card is not trashed, added to Played pile 
       63: 1304:   if (trashFlag < 1)
        -: 1305:   {
        -: 1306:      //add card to played pile
       63: 1307:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       63: 1308:      state->playedCardCount++;
        -: 1309:   }
        -: 1310:
        -: 1311:   //set played card to -1
       63: 1312:   state->hand[currentPlayer][handPos] = -1;
        -: 1313:
        -: 1314:   //remove card from player's hand
       63: 1315:   if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1316:   {
        -: 1317:      //reduce number of cards in hand
    #####: 1318:      state->handCount[currentPlayer]--;
        -: 1319:   }
       63: 1320:   else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1321:   {
        -: 1322:      //reduce number of cards in hand
    #####: 1323:      state->handCount[currentPlayer]--;
        -: 1324:   }
        -: 1325:   else 	
        -: 1326:   {
        -: 1327:      //replace discarded card with last card in hand
       63: 1328:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1329:      //set last card to -1
       63: 1330:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1331:      //reduce number of cards in hand
       63: 1332:      state->handCount[currentPlayer]--;
        -: 1333:   }
        -: 1334:
       63: 1335:   return 0;
        -: 1336:}
        -: 1337:
    #####: 1338:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1339:{
        -: 1340:   //Note: supplyPos is enum of choosen card
        -: 1341:
        -: 1342:   //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1343:   if ( supplyCount(supplyPos, state) < 1 )
        -: 1344:   {
    #####: 1345:      return -1;
        -: 1346:   }
        -: 1347:
        -: 1348:   //added card for [whoseTurn] current player:
        -: 1349:   // toFlag = 0 : add to discard
        -: 1350:   // toFlag = 1 : add to deck
        -: 1351:   // toFlag = 2 : add to hand
        -: 1352:
    #####: 1353:   if (toFlag == 1)
        -: 1354:   {
    #####: 1355:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1356:      state->deckCount[player]++;
        -: 1357:   }
    #####: 1358:   else if (toFlag == 2)
        -: 1359:   {
    #####: 1360:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1361:      state->handCount[player]++;
        -: 1362:   }
        -: 1363:   else
        -: 1364:   {
    #####: 1365:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1366:      state->discardCount[player]++;
        -: 1367:   }
        -: 1368:
        -: 1369:   //decrease number in supply pile
    #####: 1370:   state->supplyCount[supplyPos]--;
        -: 1371:
    #####: 1372:   return 0;
        -: 1373:}
        -: 1374:
      103: 1375:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1376:{
        -: 1377:   int i;
        -: 1378:
        -: 1379:   //reset coin count
      103: 1380:   state->coins = 0;
        -: 1381:
        -: 1382:   //add coins for each Treasure card in player's hand
      618: 1383:   for (i = 0; i < state->handCount[player]; i++)
        -: 1384:   {
      515: 1385:      if (state->hand[player][i] == copper)
        -: 1386:      {
      352: 1387:         state->coins += 1;
        -: 1388:      }
      163: 1389:      else if (state->hand[player][i] == silver)
        -: 1390:      {
    #####: 1391:         state->coins += 2;
        -: 1392:      }
      163: 1393:      else if (state->hand[player][i] == gold)
        -: 1394:      {
    #####: 1395:         state->coins += 3;
        -: 1396:      }	
        -: 1397:   }	
        -: 1398:
        -: 1399:   //add bonus
      103: 1400:   state->coins += bonus;
        -: 1401:
      103: 1402:   return 0;
        -: 1403:}
        -: 1404:
        -: 1405:
        -: 1406://end of dominion.c
        -: 1407:
